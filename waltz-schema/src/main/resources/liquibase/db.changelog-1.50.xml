<!--
  ~ Waltz - Enterprise Architecture
  ~ Copyright (C) 2016, 2017, 2018, 2019 Waltz open source project
  ~ See README.md for more information
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific
  ~
  -->

<databaseChangeLog xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.4.xsd"
                   logicalFilePath="db.changelog-1.50.xml">

    <changeSet id="v1-49-tag"
               author="davidwatkins73">
        <tagDatabase tag="v1.49"/> <!-- tag the current db version, i.e. the last  -->
    </changeSet>

    <changeSet id="20230515-92-1"
               author="davidwatkins73">
        <addColumn tableName="measurable">
            <column name="position"
                    type="${int.type}"
                    defaultValueNumeric="0">
                <constraints nullable="false"/>
            </column>
        </addColumn>
    </changeSet>

    <changeSet id="20230515-92-2"
               author="davidwatkins73">
        <setTableRemarks tableName="measurable"
                         remarks="defines a survey template, questions and runs will refer to this"/>
        <setColumnRemarks tableName="measurable"
                          columnName="id"
                          remarks="unique identifier for this measurable record within waltz"/>
        <setColumnRemarks tableName="measurable"
                          columnName="parent_id"
                          remarks="the id of the parent measurable"/>
        <setColumnRemarks tableName="measurable"
                          columnName="concrete"
                          remarks="indicates whether this node in the taxonomy should be viewed as abstract or concrete.  Abstract measurables are typically not usable in ratings etc."/>
        <setColumnRemarks tableName="measurable"
                          columnName="description"
                          remarks="description of the measurable item, markdown supported"/>
        <setColumnRemarks tableName="measurable"
                          columnName="external_id"
                          remarks="identifier this measurable is known by externally.  Should not change, unlike the name which may change."/>
        <setColumnRemarks tableName="measurable"
                          columnName="external_id"
                          remarks="identifier this measurable is known by externally.  Should not change, unlike the name which may change."/>
        <setColumnRemarks tableName="measurable"
                          columnName="last_updated_by"
                          remarks="the last user to update this measurable record"/>
        <setColumnRemarks tableName="measurable"
                          columnName="last_updated_at"
                          remarks="the datetime this measurable record was last updated"/>
        <setColumnRemarks tableName="measurable"
                          columnName="provenance"
                          remarks="origination of this measurable record"/>
        <setColumnRemarks tableName="measurable"
                          columnName="measurable_category_id"
                          remarks="the category groups a set of related measurables into a single taxonomy, e.g. Process"/>
        <setColumnRemarks tableName="measurable"
                          columnName="external_parent_id"
                          remarks="external identifier of this items parent node, if available"/>
        <setColumnRemarks tableName="measurable"
                          columnName="entity_lifecycle_status"
                          remarks="the lifecycle state of this measurable record (one of: ACTIVE, PENDING, REMOVED)"/>
        <setColumnRemarks tableName="measurable"
                          columnName="position"
                          remarks="numeric position of this measurable, overrides the natural sorting on name. Suggest these are assigned with gaps so that reorders are simpler, e.g. 10, 20, 30"/>
        <setColumnRemarks tableName="measurable"
                          columnName="name"
                          remarks="the name to show for this measurable item, should be relatively short"/>

    </changeSet>

    <changeSet id="20230517-6590-1"
               author="davidwatkins73">
        <addColumn tableName="measurable_category">
            <column name="position"
                    type="${int.type}"
                    defaultValueNumeric="0">
                <constraints nullable="false"/>
            </column>
        </addColumn>
    </changeSet>

    <changeSet id="20230517-6590-2"
               author="davidwatkins73">
        <addColumn tableName="measurable_category">
            <column name="icon_name"
                    type="${enum.type}"
                    defaultValue="puzzle-piece">
                <constraints nullable="false"/>
            </column>
        </addColumn>
    </changeSet>

    <changeSet id="20230517-6590-3"
               author="davidwatkins73">
        <setTableRemarks tableName="measurable"
                         remarks="defines a specific entry in a measurable category (e.g. a taxonomy item)"/>

        <setTableRemarks tableName="measurable_category"
                         remarks="groups a set of measurables together to form a basic hierarchical taxonomy"/>
        <setColumnRemarks tableName="measurable_category"
                          columnName="id"
                          remarks="unique identifier for this measurable_category record within waltz"/>
        <setColumnRemarks tableName="measurable_category"
                          columnName="name"
                          remarks="the name to show for this measurable category, should be relatively short"/>
        <setColumnRemarks tableName="measurable_category"
                          columnName="external_id"
                          remarks="identifier this measurable category is known by externally.  Should not change, unlike the name which may change."/>
        <setColumnRemarks tableName="measurable_category"
                          columnName="last_updated_at"
                          remarks="the datetime this measurable record was last updated"/>
        <setColumnRemarks tableName="measurable_category"
                          columnName="last_updated_by"
                          remarks="the last user to update this measurable record"/>
        <setColumnRemarks tableName="measurable_category"
                          columnName="rating_scheme_id"
                          remarks="links the rating scheme which will be used when entities align to the measurables in this category (via measurable_rating)"/>
        <setColumnRemarks tableName="measurable_category"
                          columnName="editable"
                          remarks="can this taxonomy be edited in the Waltz UI"/>
        <setColumnRemarks tableName="measurable_category"
                          columnName="rating_editor_role"
                          remarks="limits users who cam edit this taxonomy"/>
        <setColumnRemarks tableName="measurable_category"
                          columnName="constraining_assessment_definition_id"
                          remarks="if the category and assessment share a rating scheme, this can be used to limit the maximum rating that can be given to measurable ratings (in this category)"/>
    </changeSet>

    <!-- 6612: add subject kind to involvement kind table -->
    <changeSet id="20230522-6612-1"
               author="woodjes">
        <addColumn tableName="involvement_kind">
            <column name="subject_kind"
                    type="${enum.type}">
                <constraints nullable="true"/>
            </column>
        </addColumn>
    </changeSet>

    <changeSet id="20230522-6612-2"
               author="woodjes"
               dbms="!h2">
        <comment>6612: Updates the subject kind value for involvement kinds only used by one entity kind, if no sages
            defaults to 'APPLICATION'
        </comment>
        <sql>
            with specific_to_kind as (select ik.id, count(distinct i.entity_kind) count_kind
                                      from involvement_kind ik
                                               left join involvement i on ik.id = i.kind_id
                                      group by ik.id
                                      having count(distinct entity_kind) in (1, 0)),
                 to_update as (select distinct ik.id, coalesce(entity_kind, 'APPLICATION') entity_kind
                               from involvement_kind ik
                                        left join involvement i on ik.id = i.kind_id
                                        inner join specific_to_kind on ik.id = specific_to_kind.id)
            update involvement_kind
            set subject_kind = to_update.entity_kind from to_update
            where to_update.id = involvement_kind.id;
        </sql>
    </changeSet>

    <changeSet id="20230522-6612-4"
               author="woodjes"
               dbms="!h2">
        <comment>6612: Updates the subject kind value for involvement kinds only used by one entity kind</comment>
        <sql>
            with shared_kinds as (select kind_id, count(distinct entity_kind) count_kind
                                  from involvement
                                  group by kind_id
                                  having count(distinct entity_kind) > 1),
                 requires_splitting as (select distinct kind_id, entity_kind
                                        from involvement
                                        where kind_id in (select shared_kinds.kind_id from shared_kinds)),
                 to_insert as (select ik.name,
                                      ik.description,
                                      'admin'                                                                      last_updated_by,
                                      ik.user_selectable,
                                      requires_splitting.entity_kind,
                                      case
                                          when ik.external_id is not null
                                              then concat(requires_splitting.entity_kind, '_', ik.external_id) end external_id
                               from requires_splitting
                                        inner join involvement_kind ik on requires_splitting.kind_id = ik.id)
            insert
            into involvement_kind (name, description, last_updated_by, user_selectable, subject_kind, external_id)
            select *
            from to_insert;
        </sql>
    </changeSet>

    <changeSet id="20230522-6612-3"
               author="woodjes">
        <preConditions onFail="MARK_RAN">
            <indexExists indexName="UQ__involvem__72E12F1B741599ED"
                         tableName="involvement_kind"/>
        </preConditions>
        <comment>6612: drop index to allow splitting of inv kinds by subject kind</comment>
        <dropUniqueConstraint tableName="involvement_kind"
                              constraintName="UQ__involvem__72E12F1B741599ED"
                              uniqueColumns="name"/>
    </changeSet>

    <changeSet id="20230522-6612-5"
               author="woodjes"
               dbms="!h2">
        <comment>6612: Updates the kind id value for existing involvements to use the new kind specific to subject
            kind
        </comment>
        <sql>
            with kind_mappings as (select involvement_kind.id old_id, new_id.id new_id, new_id.subject_kind new_kind
                                   from involvement_kind
                                            inner join involvement_kind new_id
                                                       on involvement_kind.name = new_id.name and involvement_kind.id != new_id.id
            where involvement_kind.subject_kind is null)
                , required_updates as (
            select i.entity_kind, i.entity_id, i.kind_id, kind_mappings.new_id
            from involvement i
                inner join kind_mappings
            on i.kind_id = kind_mappings.old_id and i.entity_kind = kind_mappings.new_kind)
            update involvement
            set kind_id = required_updates.new_id from required_updates
            where involvement.entity_id = required_updates.entity_id
              and involvement.entity_kind = required_updates.entity_kind
              and involvement.kind_id = required_updates.kind_id;
        </sql>
    </changeSet>

    <changeSet id="20230522-6612-6"
               author="woodjes"
               dbms="!h2">
        <comment>6612: Updates the kind id value for existing key involvements to use the new kind specific to subject
            kind
        </comment>
        <sql>
            with kind_mappings as (select involvement_kind.id old_id, new_id.id new_id, new_id.subject_kind new_kind
                                   from involvement_kind
                                            inner join involvement_kind new_id
                                                       on involvement_kind.name = new_id.name and involvement_kind.id != new_id.id
            where involvement_kind.subject_kind is null)
                , default_mapping as (
            select kind_mappings.old_id, min (kind_mappings.new_id) default_new_id
            from kind_mappings
            group by kind_mappings.old_id),
                required_updates as (
            select kik.involvement_kind_id, kik.entity_kind, coalesce (km.new_id, dm.default_new_id) new_kind_id
            from key_involvement_kind kik
                inner join default_mapping dm
            on kik.involvement_kind_id = dm.old_id
                left join kind_mappings km on kik.involvement_kind_id = km.old_id and kik.entity_kind = km.new_kind
            where kik.involvement_kind_id in (select old_id from kind_mappings))
            update key_involvement_kind
            set involvement_kind_id = required_updates.new_kind_id from required_updates
            where key_involvement_kind.entity_kind = required_updates.entity_kind
              and key_involvement_kind.involvement_kind_id = required_updates.involvement_kind_id;
        </sql>
    </changeSet>

    <changeSet id="20230522-6612-7"
               author="woodjes"
               dbms="!h2">
        <comment>6612: Updates the kind id value for existing involvement group entries to use the new kind (if possible
            by looking up usage in permission group involvement otherwise takes the first))
        </comment>
        <sql>
            with kind_mappings as (select involvement_kind.id old_id, new_id.id new_id, new_id.subject_kind new_kind
                                   from involvement_kind
                                            inner join involvement_kind new_id
                                                       on involvement_kind.name = new_id.name and involvement_kind.id !=new_id.id
            where involvement_kind.subject_kind is null)
                , default_mapping as (
            select kind_mappings.old_id, min (kind_mappings.new_id) default_new_id
            from kind_mappings
            group by kind_mappings.old_id),
                required_updates as (
            select distinct ige.involvement_group_id, pgi.parent_kind entity_kind, ige.involvement_kind_id, coalesce (kind_mappings.new_id, dm.default_new_id) new_kind_id
            from involvement_group_entry ige
                inner join involvement_group ig
            on ige.involvement_group_id = ig.id
                inner join default_mapping dm on ige.involvement_kind_id = dm.old_id
                left join permission_group_involvement pgi on ig.id = pgi.involvement_group_id
                left join kind_mappings on ige.involvement_kind_id = kind_mappings.old_id
                and pgi.parent_kind = kind_mappings.new_kind
            where ige.involvement_kind_id in (select old_id from kind_mappings))
            update involvement_group_entry
            set involvement_kind_id = required_updates.new_kind_id from required_updates
            where involvement_group_entry.involvement_group_id = required_updates.involvement_group_id
              and involvement_group_entry.involvement_kind_id = required_updates.involvement_kind_id;
        </sql>
    </changeSet>

    <changeSet id="20230522-6612-8"
               author="woodjes">
        <comment>6612: Clean up old involvement kinds</comment>
        <delete tableName="involvement_kind">
            <where>
                subject_kind is null and id not in (select kind_id from involvement);
            </where>
        </delete>
    </changeSet>

    <changeSet id="20230522-6612-9"
               author="woodjes">
        <comment>6612: Make subject kind required</comment>
        <addNotNullConstraint tableName="involvement_kind"
                              columnName="subject_kind"
                              columnDataType="${enum.type}"/>
    </changeSet>

    <changeSet id="20230522-6612-10"
               author="woodjes">
        <addColumn tableName="involvement_kind">
            <column name="permitted_role"
                    type="${role.type}">
                <constraints nullable="true"/>
            </column>
        </addColumn>
    </changeSet>

</databaseChangeLog>
